name: Build And Test The API
env:
  PYTHONPATH: .
on: workflow_dispatch

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Test

    services:
      redis:  # Remove if not needed, add other services if required
        image: redis
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install -qq --upgrade pip
        pip install -qq flake8 pytest bandit safety httpx uvicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create shared reports directory
      run: mkdir -p reports

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Static security scan with Bandit
      run: bandit -r . --exclude ./tests,.vscode,.github

    - name: Run Safety in container and capture HTML output
      env:
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        SAFETY_DISABLE_TELEMETRY: "1"
      run: |
        docker run --rm \
          -e SAFETY_API_KEY \
          -e SAFETY_DISABLE_TELEMETRY \
          -v $(pwd):/app \
          -w /app \
          pyupio/safety:latest \
          safety scan --output html --target /app > ./reports/safety_report.html

    - name: Add Safety scan summary (HTML snippet)
      run: |
        echo "## Safety Scan HTML Snippet" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
        head -n 20 ./reports/safety_report.html >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Run unit tests
      run: pytest
      env:
        TENANT_ID: ${{ vars.TENANT_ID }}
        API_APP_ID: ${{ vars.API_APP_ID }}
        CLIENT_APP_ID: ${{ vars.CLIENT_APP_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    - name: Start FastAPI app in background
      run: |
        nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        TENANT_ID: ${{ vars.TENANT_ID }}
        API_APP_ID: ${{ vars.API_APP_ID }}
        CLIENT_APP_ID: ${{ vars.CLIENT_APP_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    - name: Pull ZAP image quietly
      run: docker pull -q zaproxy/zap-stable
      
    - name: Create writable temp directory
      run: mkdir -p zap-output && chmod 777 zap-output

    - name: Run OWASP ZAP scan
      run: |
        docker run --rm --network host -v $(pwd)/zap-output:/zap/wrk/:rw -t zaproxy/zap-stable zap-api-scan.py \
        -t http://localhost:8000/openapi.json \
        -w zap_warnings.md \
        -f openapi \
        -I

    - name: Add ZAP results to summary
      run: |
        echo "## OWASP ZAP Dynamic Scan Vulnerability Report" >> $GITHUB_STEP_SUMMARY
        cat zap-output/zap_warnings.md >> $GITHUB_STEP_SUMMARY

