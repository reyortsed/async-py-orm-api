name: Build And Test The API
env:
  PYTHONPATH: .
on: workflow_dispatch

permissions:
  contents: read
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Test

    services:
      redis:  # Remove if not needed, add other services if required
        image: redis
        ports:
          - 6379:6379

    steps:
    - name: Get Azure AD access token (store only)
      id: get_token
      run: |
        mkdir -p ./secrets
    
        curl -s -X POST https://login.microsoftonline.com/${{ vars.TENANT_ID }}/oauth2/v2.0/token \
          -d "client_id=${{ vars.GH_ACTIONS_AZURE_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.GH_ACTIONS_CLIENT_SECRET }}" \
          -d "scope=${{ vars.AZURE_API_SCOPE }}" \
          -d "grant_type=client_credentials" \
          | jq -r '.access_token' > ./secrets/token.txt
    
        if grep -q null ./secrets/token.txt; then
          echo "Failed to obtain token"
        fi

    - name: Show token length (without printing token)
      run: |
        LENGTH=$(cat ./secrets/token.txt | wc -c)
        echo "Access token length: $LENGTH characters"

    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
    - run: pip install -r requirements.txt

    - name: Create shared reports directory
      run: mkdir -p reports

    - name: Start FastAPI app in background
      run: |
        nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        TENANT_ID: ${{ vars.TENANT_ID }}
        API_APP_ID: ${{ vars.API_APP_ID }}
        CLIENT_APP_ID: ${{ vars.CLIENT_APP_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    - name: ZAP Scan
      uses: zaproxy/action-api-scan@v0.9.0
      with:
        target: 'http://localhost:8000/openapi.json'

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Static security scan with Bandit
      run: bandit -r . --exclude ./tests,.vscode,.github

    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

    - name: Run unit tests
      run: pytest
      env:
        TENANT_ID: ${{ vars.TENANT_ID }}
        API_APP_ID: ${{ vars.API_APP_ID }}
        CLIENT_APP_ID: ${{ vars.CLIENT_APP_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    
    #- name: Pull ZAP image quietly
    #  run: docker pull -q zaproxy/zap-stable
      
    #- name: Create writable temp directory
    #  run: mkdir -p zap-output && chmod 777 zap-output

    #- name: Run OWASP ZAP scan
    #  run: |
    #    TOKEN=$(cat ./secrets/token.txt)  
    #    docker run -e ZAP_AUTH_HEADER_VALUE="Bearer ${TOKEN}" --rm --network host -v $(pwd)/zap-output:/zap/wrk/:rw -t zaproxy/zap-stable zap-api-scan.py \
    #    -t http://localhost:8000/openapi.json \
    #    -w zap_warnings.md \
    #    -r zap_report.html \
    #    -f openapi \
    #    -I

    #- name: Add ZAP results to summary
    #  run: |
    #    echo "## OWASP ZAP Dynamic Scan Vulnerability Report" >> $GITHUB_STEP_SUMMARY
    #    cat zap-output/zap_warnings.md >> $GITHUB_STEP_SUMMARY
    #    cat zap-output/zap_report.html >> $GITHUB_STEP_SUMMARY

    

    
        

    
        

